@attribute [Route(RoutePaths.Login.Base)]
@layout LoginLayout
@using DBI.DIGI.Components.Atoms.InputAtoms
@using DBI.DIGI.Components.Toast
@using DBIID.API.Client.Extensions
@using DBIID.API.Client.Layout
@using DBIID.Shared.Dtos
@using Microsoft.AspNetCore.Components.WebAssembly;
@inject HttpClient Http
@inject JwtAuthenticationStateProvider AuthStateProvider
@inject NavigationManager navigationManager
@inject IToastService toastService

@switch (loginStatus)
{
    case LoginFlow.Login:
        <Login OnLoginResult="OnLoginResult"></Login>
        break;
    case LoginFlow.MultiFactor:
        <MultiFactor LoginResult="loginResult"></MultiFactor>
        break;

    default:
        <p>Error</p>
        break;
}


@code {

    LoginFlow loginStatus = LoginFlow.Login;
    string returnUrl;
    LoginResult loginResult;

    protected override void OnInitialized()
    {
        returnUrl = navigationManager.GetQueryParameter("returnUrl") ?? "/";
    }

    private void PostLogin()
    {
        // await AuthStateProvider.SetToken(token);

        if (string.IsNullOrWhiteSpace(returnUrl))
        {
            navigationManager.NavigateTo(RoutePaths.Home);
        }
        else
        {
            navigationManager.NavigateTo(returnUrl);
        }
    }

    public enum LoginFlow
    {
        Login,
        MultiFactor,
        OTP
    }

    private void OnLoginResult(LoginResult loginResult)
    {
        this.loginResult = loginResult;
        loginStatus = LoginFlow.MultiFactor;
        StateHasChanged();
    }
}