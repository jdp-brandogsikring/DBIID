@using DBI.DIGI.Components.Toast
@using DBIID.Shared.Features.Users
@inject IApiRequestService ApiRequestService
@inject IToastService ToastService

<h3>Rediger bruger</h3>

<DBI.DIGI.Components.Inputs.LabeledTextInput Label="Fornavn" @bind-Input="user.GivenName"></DBI.DIGI.Components.Inputs.LabeledTextInput>
<DBI.DIGI.Components.Inputs.LabeledTextInput Label="Efternavn" @bind-Input="user.FamilyName"></DBI.DIGI.Components.Inputs.LabeledTextInput>
<DBI.DIGI.Components.Inputs.LabeledTextInput Label="E-mail" @bind-Input="user.Email"></DBI.DIGI.Components.Inputs.LabeledTextInput>


<DBI.DIGI.Components.Button Class="DBI.DIGI.Components.ButtonType.Prim" OnClick="OnUpdateUser" Title="Opdater bruger"></DBI.DIGI.Components.Button>

<br />
<br />

<DBI.DIGI.Components.Inputs.LabeledTextInput Label="Ny adgangskode" @bind-Input="resetPasswordCommand.Password"></DBI.DIGI.Components.Inputs.LabeledTextInput>
<DBI.DIGI.Components.Button Class="DBI.DIGI.Components.ButtonType.Sec" OnClick="OnResetPassword" Title="Nulstil adgangskode"></DBI.DIGI.Components.Button>


@if (!string.IsNullOrEmpty(validationMessage))
{
    <p style="color:red">@validationMessage</p>
}

@code {

    [Parameter]
    public required int UserId { get; set; }

    [Parameter]
    public required EventCallback<UserDto> OnClose { get; set; }

    private UpdateUserCommand user = new();
    private string validationMessage;

    private ResetPasswordCommand resetPasswordCommand = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await ApiRequestService.SendAsync(new GetUserQuery() { Id = UserId });
            if (response.IsSuccess)
            {
                user = new UpdateUserCommand()
                    {
                        Id = response.Value.Id,
                        GivenName = response.Value.GivenName,
                        FamilyName = response.Value.FamilyName,
                        Email = response.Value.Email
                    };
                StateHasChanged();
            }
        }
    }

    private async Task OnResetPassword()
    {
        validationMessage = string.Empty;

        resetPasswordCommand.UserId = UserId;

        var response = await ApiRequestService.SendAsync(resetPasswordCommand);
        if (!response.IsSuccess)
        {
            validationMessage = response.Message; // ✅ Vis fejlbesked i UI
        }
        else
        {
            ToastService.Open(new ToastWithAutoClose()
                {
                    Status = ToastStatus.Success,
                    Title = "Brugerens adgangskode er nulstillet",
                    Duration = TimeSpan.FromSeconds(5)
                });
            resetPasswordCommand = new();
        }
    }

    private async Task OnUpdateUser()
    {
        validationMessage = string.Empty;

        var response = await ApiRequestService.SendAsync(user);
        if (!response.IsSuccess)
        {
            validationMessage = response.Message; // ✅ Vis fejlbesked i UI
            ToastService.Open(new ToastWithAutoClose()
                {
                    Duration = TimeSpan.FromSeconds(5),
                    Status = ToastStatus.Error,
                    Title = "Der skete en fejl"
                });
        }
        else
        {
            ToastService.Open(new ToastWithAutoClose()
                {
                    Status = ToastStatus.Success,
                    Title = "Brugeren er opdateret",
                    Duration = TimeSpan.FromSeconds(5)
                });
            await OnClose.InvokeAsync(response.Value);
        }
    }
}
