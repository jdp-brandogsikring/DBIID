@using DBI.DIGI.Components.Toast
@using DBIID.Shared.Features.Companies
@using DBIID.Shared.Features.Users
@inject IApiRequestService ApiRequestService
@inject IToastService ToastService

<h3>Rediger bruger</h3>

<DBI.DIGI.Components.Inputs.LabeledTextInput Label="Fornavn" @bind-Input="user.GivenName"></DBI.DIGI.Components.Inputs.LabeledTextInput>
<DBI.DIGI.Components.Inputs.LabeledTextInput Label="Efternavn" @bind-Input="user.FamilyName"></DBI.DIGI.Components.Inputs.LabeledTextInput>
<DBI.DIGI.Components.Inputs.LabeledTextInput Label="E-mail" @bind-Input="user.Email"></DBI.DIGI.Components.Inputs.LabeledTextInput>


<DBI.DIGI.Components.Button Class="DBI.DIGI.Components.ButtonType.Prim" OnClick="OnUpdateUser" Title="Opdater bruger"></DBI.DIGI.Components.Button>

@if (!string.IsNullOrEmpty(validationMessage))
{
    <p style="color:red">@validationMessage</p>
}

<hr />

<DBI.DIGI.Components.Inputs.LabeledTextInput Label="Ny adgangskode" @bind-Input="resetPasswordCommand.Password"></DBI.DIGI.Components.Inputs.LabeledTextInput>
<DBI.DIGI.Components.Button Class="DBI.DIGI.Components.ButtonType.Sec" OnClick="OnResetPassword" Title="Nulstil adgangskode"></DBI.DIGI.Components.Button>

<hr />

<h5>Virksomheder</h5>
@if (Companies is not null)
{
    foreach (var item in Companies)
    {
        <p>@item.Name</p>
        @if(userWithAssignedCompaniesDto.Companies.Any(x => x.Id == item.Id))
        {
            <DBI.DIGI.Components.Button Title="Fjern" OnClick="() => Remove(item.Id)"></DBI.DIGI.Components.Button>
        }
        else
        {
            <DBI.DIGI.Components.Button Title="Tilføj" OnClick="() => Assign(item.Id)"></DBI.DIGI.Components.Button>
        }
    }
}


@code {

    [Parameter]
    public required int UserId { get; set; }

    [Parameter]
    public required EventCallback<UserDto> OnClose { get; set; }

    private UpdateUserCommand user = new();
    private string validationMessage;

    private ResetPasswordCommand resetPasswordCommand = new();

    private UserWithAssignedCompaniesDto userWithAssignedCompaniesDto { get; set; }
    private List<CompanyDto>? Companies { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await ApiRequestService.SendAsync(new GetUserQuery() { Id = UserId });
            if (response.IsSuccess)
            {
                userWithAssignedCompaniesDto = response.Value;
                user = new UpdateUserCommand()
                    {
                        Id = response.Value.Id,
                        GivenName = response.Value.GivenName,
                        FamilyName = response.Value.FamilyName,
                        Email = response.Value.Email
                    };
                StateHasChanged();
            }

            var companyResponse = await ApiRequestService.SendAsync(new GetAllCompaniesQuery());
            if (companyResponse.IsSuccess)
            {
                Companies = companyResponse.Value;
                StateHasChanged();
            }
            else
            {
                ToastService.Open(new ToastWithAutoClose()
                    {
                        Duration = TimeSpan.FromSeconds(5),
                        Status = ToastStatus.Error,
                        Title = "Kunne ikke hente virksomheder"
                    });
            }
        }
    }

    private async Task OnResetPassword()
    {
        validationMessage = string.Empty;

        resetPasswordCommand.UserId = UserId;

        var response = await ApiRequestService.SendAsync(resetPasswordCommand);
        if (!response.IsSuccess)
        {
            validationMessage = response.Message; // ✅ Vis fejlbesked i UI
        }
        else
        {
            ToastService.Open(new ToastWithAutoClose()
                {
                    Status = ToastStatus.Success,
                    Title = "Brugerens adgangskode er nulstillet",
                    Duration = TimeSpan.FromSeconds(5)
                });
            resetPasswordCommand = new();
        }
    }

    private async Task OnUpdateUser()
    {
        validationMessage = string.Empty;

        var response = await ApiRequestService.SendAsync(user);
        if (!response.IsSuccess)
        {
            validationMessage = response.Message; // ✅ Vis fejlbesked i UI
            ToastService.Open(new ToastWithAutoClose()
                {
                    Duration = TimeSpan.FromSeconds(5),
                    Status = ToastStatus.Error,
                    Title = "Der skete en fejl"
                });
        }
        else
        {
            ToastService.Open(new ToastWithAutoClose()
                {
                    Status = ToastStatus.Success,
                    Title = "Brugeren er opdateret",
                    Duration = TimeSpan.FromSeconds(5)
                });
            await OnClose.InvokeAsync(response.Value);
        }
    }

    private async void Assign(int companyId)
    {
        var responce = await ApiRequestService.SendAsync(new AssignUserToCompanyCommand() { UserId = user.Id, CompanyId = companyId });
        if (responce.IsSuccess)
        {
            ToastService.Open(new ToastWithAutoClose()
                {
                    Status = ToastStatus.Success,
                    Title = "Brugeren er tilknytte til virksomheden",
                    Duration = TimeSpan.FromSeconds(5)
                });
            userWithAssignedCompaniesDto.Companies.Add(new CompanyDto()
                {
                    Id = companyId,
                    Name = ""
                });
        }
        else
        {
            ToastService.Open(new ToastWithAutoClose()
                {
                    Duration = TimeSpan.FromSeconds(5),
                    Status = ToastStatus.Error,
                    Title = "Der skete en fejl"
                });
        }

        StateHasChanged();
    }

    private async void Remove(int companyId)
    {
        var responce = await ApiRequestService.SendAsync(new RemoveUserFromCompanyCommand() { UserId = user.Id, CompanyId = companyId });
        if (responce.IsSuccess)
        {
            ToastService.Open(new ToastWithAutoClose()
                {
                    Status = ToastStatus.Success,
                    Title = "Brugeren er ikke længere tilknytte til virksomheden",
                    Duration = TimeSpan.FromSeconds(5)
                });
                var company = userWithAssignedCompaniesDto.Companies.FirstOrDefault(x => x.Id == companyId);
                userWithAssignedCompaniesDto.Companies.Remove(company);
        }
        else
        {
            ToastService.Open(new ToastWithAutoClose()
                {
                    Duration = TimeSpan.FromSeconds(5),
                    Status = ToastStatus.Error,
                    Title = "Der skete en fejl"
                });
        }

        StateHasChanged();
    }

}
