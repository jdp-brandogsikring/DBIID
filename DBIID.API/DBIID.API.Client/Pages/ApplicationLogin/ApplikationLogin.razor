@attribute [Route(RoutePaths.Login.Application)]
@using DBI.DIGI.Components.Toast
@using DBIID.Shared.Features.Applications
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using System.Security.Claims
@inject NavigationManager navigationManager
@inject IApiRequestService ApiRequestService
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationState


<h1>SSO Login</h1>

<table style="text-align: justify; border: 1px solid black;border-collapse: collapse;">
    <tr style="border: 1px solid black;border-collapse: collapse;">
        <th>Applikation</th>
        <td>@loginDto?.ApplicationName</td>
    </tr>
    <tr style="border: 1px solid black;border-collapse: collapse;">
        <th>Bruger</th>
        <td>@loginDto?.UserName</td>
    </tr>
    <tr style="border: 1px solid black;border-collapse: collapse;">
        <th>Login Token</th>
        <td>@loginDto?.SSOToken</td>
    </tr>
    <tr style="border: 1px solid black;border-collapse: collapse;">
        <th>Validerings Url</th>
        <td>
            @if (!string.IsNullOrWhiteSpace(loginDto?.SSOToken))
            {
                string url = $"https://localhost:7128/api/system/{loginDto.SSOToken}";
                <a href="@url">Link</a>
            }
            else
            {
                <p>Fejl</p>
            }
        </td>
    </tr>
    <tr style="border: 1px solid black;border-collapse: collapse;">
        <th>Auto redirect</th>
        <td></td>
    </tr>
    <tr style="border: 1px solid black;border-collapse: collapse;">
        <th>Link</th>
        <td>
            @if (!string.IsNullOrWhiteSpace(loginDto?.ApplicationUrl))
            {
                string url = loginDto?.ApplicationUrl + "?sso=" + loginDto?.SSOToken;
                <a href="@url">Link</a>
            } else
            {
                <p>Fejl</p>
            }

        </td>
    </tr>
</table>


@code {

    public string? AppId { get; set; }
    public string? UserId { get; set; }
    public ApplicationLoginDto? loginDto { get; set; }

    protected override void OnInitialized()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("App", out var app))
        {
            AppId = app;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            if (string.IsNullOrEmpty(AppId))
            {
                ToastService.Open(new ToastWithAutoClose()
                    {
                        Duration = TimeSpan.FromSeconds(5),
                        Status = ToastStatus.Error,
                        Title = "Der skete en fejl"
                    });
                return;
            }

            var response = await ApiRequestService.SendAsync(new GenerateApplicationLoginCommand() { Token = AppId });
            if (response.IsSuccess)
            {
                loginDto = response.Value;
                StateHasChanged();
                // string url = loginDto?.ApplicationUrl + "?sso=" + loginDto?.SSOToken;
                // navigationManager.NavigateTo(url);
            }
            else
            {
                ToastService.Open(new ToastWithAutoClose()
                    {
                        Duration = TimeSpan.FromSeconds(5),
                        Status = ToastStatus.Error,
                        Title = "Der skete en fejl"
                    });
            }
        }
    }
}
