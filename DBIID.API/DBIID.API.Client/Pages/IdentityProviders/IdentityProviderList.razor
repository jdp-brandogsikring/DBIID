@attribute [Route(RoutePaths.IdentityProviders.List)]
@using DBI.DIGI.Components.Atoms.TextAtoms
@using DBI.DIGI.Components.Layouts
@using DBI.DIGI.Components.Table
@using DBI.DIGI.Components.Toast
@using DBIID.Shared.Features.IdentityProviders
@using DBIID.Shared.Features.Users
@inject IApiRequestService ApiRequestService
@inject IToastService toastService

<HeadingContainer>
    <Heading>
        <PageHeader Color="black" >
            Identitetsudbydere
            <button style="all:unset" @onclick="onNewIdentityProvider">
                <i class="fa-light fa-circle-plus"></i>
            </button>
        </PageHeader> 
    </Heading>
</HeadingContainer>

@if (identityProviders is null)
{
    <p>Loading...</p>
}
else
{
    <Table Data="identityProviders" Context="identityProvider" OnTableRowClick="((IdentityProviderDto p) => onRowClicked(p))" Hover="true">
        <Filters>
            <TableFilter PropertyName="Name" Title="Navn"></TableFilter>
        </Filters>
        <HeaderContent>
            <TableHead><TableHeadSort PropertyName="Name">Navn</TableHeadSort></TableHead>
            <TableHead><TableHeadSort PropertyName="TenantId">Tenant Id</TableHeadSort></TableHead>
            <TableHead><TableHeadSort PropertyName="Secret">Nøgle</TableHeadSort></TableHead>
            <TableHeadMenu></TableHeadMenu>
        </HeaderContent>
        <RowTemplate>
            <TableData>@identityProvider.Name</TableData>
            <TableData>@identityProvider.TenantId</TableData>
            <TableData>@identityProvider.Secret</TableData>
            <TableDataMenu>
                <TableDataMenuItem OnClick="() => onEdit(identityProvider)"><i class="fa-light fa-folder-open"></i>Åben</TableDataMenuItem>
            </TableDataMenu>
        </RowTemplate>
    </Table>


    <DBI.DIGI.Components.Modals.Flyout IsVisible=@isEditVisible OnClose="onFlyoutClose">
        <FlyoutContent>
            <EditIdentityProvider Id="@selected.Id" OnClose="onEditClose"></EditIdentityProvider>
        </FlyoutContent>
    </DBI.DIGI.Components.Modals.Flyout>

    <DBI.DIGI.Components.Modals.Flyout IsVisible=@isCreateVisible OnClose="onFlyoutClose">
        <FlyoutContent>
            <CreateIdentityProvider OnClose="onCreateClose"></CreateIdentityProvider>
        </FlyoutContent>
    </DBI.DIGI.Components.Modals.Flyout> 
}

@code {
    private List<IdentityProviderDto> identityProviders;
    private IdentityProviderDto selected;

    private bool isEditVisible = false;
    private bool isCreateVisible = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await OnLoadDate();
        }
    }

    private async Task OnLoadDate()
    {
            try
            {

                var response = await ApiRequestService.SendAsync(new GetAllIdentityProvidersQuery());
                if (response.IsSuccess)
                identityProviders = response.Value.ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            StateHasChanged();
        
    }

    private async void onCreateClose(IdentityProviderDto identityProvider)
    {
        identityProviders.Add(identityProvider);

        this.onFlyoutClose();
    }

    private async void onEditClose(IdentityProviderDto identityProvider)
    {
        int index = identityProviders.IndexOf(selected);
        identityProviders[index] = identityProvider;

        this.onFlyoutClose();
    }

    private async void onFlyoutClose()
    {
        isEditVisible = false;
        isCreateVisible = false;

        StateHasChanged();
    }

    void onRowClicked(IdentityProviderDto identityProvider)
    {
        selected = identityProvider;
        isEditVisible = true;
        StateHasChanged();
    }

    public void onEdit(IdentityProviderDto identityProvider)
    {
        selected = identityProvider;
        isEditVisible = true;
        StateHasChanged();
    }

    public void onNewIdentityProvider()
    {
        isCreateVisible = true;
        StateHasChanged();
    }
}
